#install.packages("corrgram")
#install.packages("cividis")
require(corrgram)
require(flexmix)
corrgram(matcor, type = "cor")
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
require(corrgram)
require(flexmix)
corrgram(matcor)
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
require(corrgram)
require(flexmix)
corrgram(matcor, type = "cor", lower.panel = panel.shade, upper.panel = panel.pie)
cor(creme_dental_exemplo1)
corrgram(mtcars, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
require(corrgram)
require(flexmix)
corrgram(mtcars, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
install.packages("psych")
#install.packages("psych")
require(psych)
cortest.bartlett(creme_dental_exemplo1)
KMO(creme_dental_exemplo1)
fit<-princomp(creme_dental_exemplo1,cor=TRUE)
fit
summary(fit)
creeplot(fit)
screeplot(fit)
PCAdente<-principal(creme_dental_exemplo1, nfactors=2, n.obs=30,rotate=
none
, scores=TRUE)
plot(fit,type="lines")
PCAdente<-principal(creme_dental_exemplo1, nfactors=2, n.obs=30,rotate="none", scores=TRUE)
PCAdente
PCAdentevarimax<-principal(creme_dental_exemplo1, nfactors=2, n.obs=30,rotate="varimax",scores=TRUE)
PCAdentevarimax
PCAdentevarimax$values
PCAdentevarimax$loadings
biplot(PCAdentevarimax)
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
install.packages("virdislite")
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
install.packages("vcd")
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
library("vcd", lib.loc="~/R/win-library/3.4")
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
install.packages("viznetwork")
library("vcd", lib.loc="~/R/win-library/3.4")
install.packages("Scatterplot3d")
install.packages("scatterplot3d")
library("scatterplot3d", lib.loc="~/R/win-library/3.4")
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrgram)
install.packages("cividis")
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
require(vcd)
library(corrgram)
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
require(vcd)
library(corrgram)
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrplot)
install.packages("corrplot")
#install.packages("flexmix")
#install.packages("corrgram")
#install.packages("cividis")
library(corrplot)
corrplot(matcor, method="circle")
install.packages(c("blogdown", "bookdown", "viridis", "viridisLite"))
install.packages(c("blogdown", "bookdown", "viridis", "viridisLite"))
install.packages(c("blogdown", "bookdown", "viridis", "viridisLite"))
install.packages(c("blogdown", "bookdown", "viridis", "viridisLite"))
install.packages(c("blogdown", "bookdown", "viridis", "viridisLite"))
citr:::insert_citation()
bookdown:::serve_book()
bookdown:::mathquill()
library(readxl)
url <- "https://github.com/Smolski/softwarelivrer/raw/master/avancado/arvore2.xlsx"
destfile <- "arvore2.xlsx"
curl::curl_download(url, destfile)
arvore2 <- read_excel(destfile)
head(arvore2)
modelom=lm(altura_m~diametro_cm+especie)
library(readxl)
url <- "https://github.com/Smolski/softwarelivrer/raw/master/avancado/arvore2.xlsx"
destfile <- "arvore2.xlsx"
curl::curl_download(url, destfile)
arvore2 <- read_excel(destfile)
attach(arvore2)
head(arvore2)
modelom=lm(altura_m~diametro_cm+especie)
modelom
summary(modelom)
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col='blue') points(diametro_cm[especie==1],altura_m[especie==1],col='red')
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col="blue") points(diametro_cm[especie==1],altura_m[especie==1],col="red")
plot(diametro_cm,altura_m,type='n')
plot(diametro_cm,altura_m,type="n")
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col="blue"
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col="blue")
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col="blue") points(diametro_cm[especie==1],altura_m[especie==1],col="red")
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==1],altura_m[especie==1],col="red")
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col="blue") points(diametro_cm[especie==1],altura_m[especie==1],col="red")
View(arvore2)
summary(especie)
summary(arvore2)
modelom=lm(altura_m~diametro_cm+especie)
modelom
summary(modelom)
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
poi
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col='blue') points(diametro_cm[especie==1],altura_m[especie==1],col='red')
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col='blue') #points(diametro_cm[especie==1],altura_m[especie==1],col='red')
# Acrescenta as linhas
abline(coef(modelom)[1], coef(modelo)[2], col='blue') abline(coef(modelom)[1]+coef(modelom)[3], coef(modelom)[2], col='red')
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col='blue') #points(diametro_cm[especie==1],altura_m[especie==1],col='red')
# Acrescenta as linhas
abline(coef(modelom)[1], coef(modelo)[2], col='blue') #abline(coef(modelom)[1]+coef(modelom)[3], coef(modelom)[2], col='red')
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col='blue') #points(diametro_cm[especie==1],altura_m[especie==1],col='red')
# Acrescenta as linhas
abline(coef(modelom)[1], coef(modelom)[2], col='blue') #abline(coef(modelom)[1]+coef(modelom)[3], coef(modelom)[2], col='red')
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col='blue') points(diametro_cm[especie==1],altura_m[especie==1],col='red')
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col='blue') #points(diametro_cm[especie==1],altura_m[especie==1],col='red')
# Acrescenta as linhas
abline(coef(modelom)[1], coef(modelom)[2], col='blue') abline(coef(modelom)[1]+coef(modelom)[3], coef(modelom)[2], col='red')
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col='blue') #points(diametro_cm[especie==1],altura_m[especie==1],col='red')
# Acrescenta as linhas
abline(coef(modelom)[1], coef(modelom)[2], col='blue') #abline(coef(modelom)[1]+coef(modelom)[3], coef(modelom)[2], col='red')
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
#points(diametro_cm[especie==0],altura_m[especie==0],col='blue') points(diametro_cm[especie==1],altura_m[especie==1],col='red')
# Acrescenta as linhas
#abline(coef(modelom)[1], coef(modelom)[2], col='blue')
abline(coef(modelom)[1]+coef(modelom)[3], coef(modelom)[2], col='red')
plot(diametro_cm,altura_m)
# Gera o gráfico sem pontos
plot(diametro_cm,altura_m,type='n')
# Acrescenta os pontos
points(diametro_cm[especie==0],altura_m[especie==0],col='blue')
points(diametro_cm[especie==1],altura_m[especie==1],col='red')
# Acrescenta as linhas
abline(coef(modelom)[1], coef(modelom)[2], col='blue')
abline(coef(modelom)[1]+coef(modelom)[3], coef(modelom)[2], col='red')
library(readr)
chd <- read_delim("https://raw.githubusercontent.com/Smolski/files/master/chd.csv",
";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
chd <- read_delim("https://raw.githubusercontent.com/Smolski/files/master/chd.csv",
";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
chd <- read_delim("https://raw.githubusercontent.com/Smolski/files/master/cdh.csv",
";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
chd <- read_delim("https://raw.githubusercontent.com/Smolski/softwarelivrer/master/avancado/cdh.csv",
";", escape_double = FALSE, trim_ws = TRUE)
summary(chd)
library(ggplot2)
ggplot(chd, aes(x=AGE, y=CHD)) + geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE)
require(mfx)
logitor(CHD~AGE,data = chd)
exp(cbind(OR=coef(m1), confint(m1)))
m1=glm(CHD~AGE, family = binomial(link="logit"), data = chd)
summary(m1)
exp(cbind(OR=coef(m1), confint(m1)))
media = data.frame(AGE=mean(chd$AGE))
media
media$pred.prob = predict(m1, newdata=media, type="response")
media
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.numeric(pdata>0.5), reference = chd$CHD)
library(pROC)
roc1=plot.roc(chd$CHD,fitted(m1))
plot(roc1,print.auc=TRUE, auc.polygon=TRUE,grud=c(0.1,0.2),
grid.col=c("green","red"),max.auc.polygon=TRUE,auc.polygon.col="lightgreen",print.thres=TRUE)
library(modEvA)
require(ResourceSelection)
hl=hoslem.test(chd$CHD,fitted(m1),g=10)
library(ResourceSelection)
install.packages("ResourceSelection")
library(ResourceSelection)
hl=hoslem.test(chd$CHD,fitted(m1),g=10)
hl
library(modEvA)
install.packages("modEvA")
library(modEvA)
RsqGLM(m1)
library(foreign)
mydata <- read.dta("http://dss.princeton.edu/training/Panel101.dta")
summary(mydata)
logit=glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit"))
summary(logit)
require(maptools)
require(tmap)
require(rgdal)
MAPA_RS=readShapeSpatial('D:/Github/livroravancado/mapas/bases/municipios_IBGE/municipios_IBGE.shp')
save.image("D:/Github/livroavancado/mapas/Mapas.RData")
require(maptools)
require(tmap)
require(rgdal)
MAPA_RS=readShapeSpatial('D:/Github/livroravancado/mapas/bases/municipios_IBGE/municipios_IBGE.shp')
git rm --chached giant_file
install.packages("dplyr")
install.packages("corrplot")
library(readxl)
url <- "https://github.com/Smolski/softwarelivrer/raw/master/avancado/creme_dental_exemplo1.xlsx"
destfile <- "creme_dental_exemplo1.xlsx"
curl::curl_download(url, destfile)
creme_dental_exemplo1 <- read_excel(destfile)
attach(creme_dental_exemplo1)
summary(creme_dental_exemplo1)
install.packages("psych")
install.packages("mfx")
install.packages("caret")
install.packages("stargazer")
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
install.packages("pROC")
media = data.frame(AGE=mean(chd$AGE))
require(mfx)
logitor(CHD~AGE,data = chd)
library(readr)
chd <- read_delim("https://raw.githubusercontent.com/Smolski/softwarelivrer/master/avancado/cdh.csv",
";", escape_double = FALSE, trim_ws = TRUE)
summary(chd)
library(ggplot2)
ggplot(chd, aes(x=AGE, y=CHD)) + geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE)
m1=glm(CHD~AGE, family = binomial(link="logit"), data = chd)
summary(m1)
require(mfx)
logitor(CHD~AGE,data = chd)
exp(cbind(OR=coef(m1), confint(m1)))
media = data.frame(AGE=mean(chd$AGE))
media
media$pred.prob = predict(m1, newdata=media, type="response")
media
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.numeric(pdata>0.5), reference = chd$CHD)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.factor(pdata>0.5), reference = chd$CHD)
View(chd)
View(m1)
require(pROC)
roc1=plot.roc(chd$CHD,fitted(m1))
m1
confusionMatrix(data = as.numeric(pdata>0.5), reference = chd$CHD)
pdata
confusionMatrix(data = pdata>0.5, reference = chd$CHD)
library(readr)
library(readr)
cdh <- read_delim("https://raw.githubusercontent.com/Smolski/softwarelivrer/master/avancado/cdh.csv",
";", escape_double = FALSE, col_types = cols(CHD = col_double()),
trim_ws = TRUE)
summary(chd)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.numeric(pdata>0.5), reference = chd$CHD)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.factor(pdata>0.5), reference = chd$CHD)
confusionMatrix(data = as.factor(pdata>0.5), reference = as.factor(chd$CHD))
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.factor(pdata>0.5), reference = as.factor(chd$CHD))
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = pdata>0.5, reference = as.factor(chd$CHD))
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(reference = as.factor(chd$CHD))
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.numeric(pdata>0.5), reference = chd$CHD)
plot(roc1,print.auc=TRUE, auc.polygon=TRUE,grud=c(0.1,0.2),
grid.col=c("green","red"),max.auc.polygon=TRUE,auc.polygon.col="lightgreen",print.thres=TRUE)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.numeric(pdata), reference = chd$CHD)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = pdata, reference = chd$CHD)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.factor(pdata, reference = chd$CHD)
confusionMatrix(pdata, chd$CHD)
confusionMatrix(as.factor(pdata), chd$CHD)
confusionMatrix(as.factor(pdata), as.factor(chd$CHD))
confusionMatrix(data = pdata>0.5, chd$CHD)
confusionMatrix(data = as.numeric(pdata>0.5),chd$CHD)
install.packages("ResourceSelection")
install.packages("modEvA")
if (!is.installed("hydroGOF")){
install.packages("hydroGOF")
}
is.installed <- function(mypkg){
is.element(mypkg, installed.packages()[,1])
}
# check if package "hydroGOF" is installed
if (!is.installed("hydroGOF")){
install.packages("hydroGOF")
}
is.installed <- function(mypkg){
is.element(mypkg, installed.packages()[,1])
}
packages <- c("caret", "pROC", "ResourceSelection", "ModEva", "foreign", "stargazer", "mfx","readr","ggplot2")
# check if packages are installed
if (!is.installed("hydroGOF")){
install.packages("hydroGOF")
}
is.installed <- function(mypkg){
is.element(mypkg, installed.packages()[,1])
}
packages <- c("caret", "pROC", "ResourceSelection", "ModEva", "foreign", "stargazer", "mfx","readr","ggplot2")
# check if packages are installed
if (!is.installed(packages)){
install.packages(packages)
}
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
n
packages <- c("caret", "pROC", "ResourceSelection", "ModEvA", "foreign", "stargazer", "mfx","readr","ggplot2")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
n
packages <- c("caret", "pROC", "ResourceSelection", "modEvA", "foreign", "stargazer", "mfx","readr","ggplot2")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
packages <- c("caret", "pROC", "ResourceSelection", "modEvA", "foreign", "stargazer", "mfx","readr","ggplot2","BETS")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
packages <- c("caret", "pROC", "ResourceSelection", "modEvA", "foreign", "stargazer", "mfx","readr","ggplot2","BETS")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
packages <- c("caret", "pROC", "ResourceSelection", "modEvA", "foreign", "stargazer", "mfx","readr","ggplot2","BETS")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
packages <- c("caret", "pROC", "ResourceSelection", "modEvA", "foreign", "stargazer", "mfx","readr","ggplot2","tmap","rgdal")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.numeric(pdata>0.5), reference = chd$CHD)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.numeric(pdata>0.5), reference = chd$CHD,na.action = na.pass)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = na.omit(as.numeric(pdata>0.5)), reference = chd$CHD,na.action = na.pass)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = na.omit((pdata>0.5)), reference = chd$CHD,na.action = na.pass)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = na.omit(pdata>0.5), reference = chd$CHD,na.action = na.pass)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = na.omit(pdata), reference = chd$CHD,na.action = na.pass)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.factor(pdata>0.5), reference = chd$CHD)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.double(pdata>0.5), reference = chd$CHD)
summary(chd)
confusionMatrix(table(chd,pdata))
summary(pdata)
summary(chd$CHD)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.factor(pdata>0.5), reference = as.factor(chd$CHD))
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.factor(pdata), reference = as.factor(chd$CHD),cutoff = 0.5)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = pdata, reference = chd$CHD,cutoff = 0.5)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = asnumeric(pdata>0.5), reference = chd$CHD)
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.numeric(pdata>0.5), reference = chd$CHD)
table(chd,pdata)
exp(cbind(OR=coef(m1), confint(m1)))
require(caret)
pdata <- predict(m1, newdata = chd, type = "response")
confusionMatrix(data = as.numeric(pdata>0.5), reference = chd$CHD)
