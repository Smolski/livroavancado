pred$prob=predict(mylogit, newdata=pred, type="response")
pred
pred=data.frame(gre=600,
gpa=3.40,
rank=factor(1)
)
pred$prob=predict(mylogit, newdata=pred, type="response")
pred
pred=data.frame(gre=700,
gpa=3.40,
rank=factor(1)
)
pred$prob=predict(mylogit, newdata=pred, type="response")
pred
pred=data.frame(gre=700,
gpa=3.67,
rank=factor(1)
)
pred$prob=predict(mylogit, newdata=pred, type="response")
pred
pred=data.frame(gre=700,
gpa=3.67,
rank=factor(1)
)
pred$prob=predict(mylogit, newdata=pred, type="response")
pred
pred=data.frame(gre=700,
gpa=3.67,
rank=factor(4)
)
pred$prob=predict(mylogit, newdata=pred, type="response")
pred
library(readr)
titanic <- read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv",
col_types = cols_only(age = col_factor(levels = c())))
View(titanic)
library(readr)
titanic <- read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv")
View(titanic)
library(readr)
titanic <- read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv",)
View(titanic)
library(readr)
titanic <- read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv",
cols(
X1 = col_integer(),
class = col_character(),
age = col_factor(),
sex = col_character(),
survived = col_character()
))
View(titanic)
library(readr)
titanic <- read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv",
cols(
X1 = col_integer(),
class = col_character(),
age = factor(),
sex = col_character(),
survived = col_character()
))
View(titanic)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
titanic <- read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv")
View(titanic)
library(readr)
titanic <- read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv")
head(titanic)
library(readr)
titanic <- read_csv("https://vincentarelbundock.github.io/Rdatasets/csv/COUNT/titanic.csv")
titanic$class=as.factor(titanic$class)
titanic$age=as.factor(titanic$age)
titanic$sex=as.factor(titanic$sex)
head(titanic)
titanic$sobreviveu=ifelse(titanic$survived=='yes',1,0)
titanic$sobreviveu=ifelse(titanic$survived=='yes',1,0)
head(titanic)
titanic$sobreviveu=ifelse(titanic$survived=='yes',1,0)
head(titanic)
summary(titanic)
titanic$sobreviveu=ifelse(titanic$survived=='yes',"1","0")
head(titanic)
summary(titanic)
View(titanic)
titanic$sobreviveu=ifelse(titanic$survived=='yes',"1","0")
head(titanic)
summary(titanic)
titlog=glm(sobreviveu~class+age+sex, data=titanic, method.args=list(family="binomial"))
titlog=glm(sobreviveu~class+age+sex, data=titanic, family = binomial(link="logit"))
titanic$sobreviveu=ifelse(titanic$survived=='yes',1,0)
head(titanic)
summary(titanic)
titlog=glm(sobreviveu~class+age+sex, data=titanic, family = binomial(link="logit"))
titlog=glm(sobreviveu~class+age+sex, data=titanic, family = binomial(link="logit"))
summary(titlog)
titlog=glm(sobreviveu~class+age+sex, data=titanic, family = binomial(link="logit"))
summary(titlog)
titlog=glm(sobreviveu~class+age+sex, data=titanic, family = binomial(link="logit"))
summary(titlog)
exp(cbind(OR=coef(titlog), confint(titlog)))
predtit=data.frame(sex="women",
age="adults",
class="1st class"
)
predtit$prob=predict(titlog, newdata=predtit, type="response")
predtit
predtit2=data.frame(sex="men",
age="adults",
class="3st class"
)
predtit2$prob=predict(titlog, newdata=predtit2, type="response")
predtit2=data.frame(sex="man",
age="adults",
class="3st class"
)
predtit2$prob=predict(titlog, newdata=predtit2, type="response")
predtit2=data.frame(sex="man",
age="adults",
class="3st class"
)
predtit2$prob=predict(titlog, newdata=predtit2, type="response")
predtit2=data.frame(sex="man",
age="adults",
class="3rd class"
)
predtit2$prob=predict(titlog, newdata=predtit2, type="response")
predtit2
predtit2=data.frame(sex="man",
age="adults",
class="3rd class"
)
predtit2$prob=predict(titlog, newdata=predtit2, type="response")
predtit2
require(caret)
titmat=predict(titlog, newdata=titanic, type="response")
confusionMatrix(titmat, titanic$sobreviveu)
require(caret)
titmat=as.factor(ifelse
(predict(titlog, newdata=titanic, type="response")
>0.5,"1","0"))
confusionMatrix(titmat, titanic$sobreviveu, positive="1")
require(caret)
titmat=as.factor(ifelse(
predict(titlog,
newdata=titanic,
type="response")
>0.5,"1","0"))
confusionMatrix(titmat, titanic$sobreviveu, positive="1")
titmat=as.factor(ifelse(
predict(titlog,
newdata=titanic,
type="response")
>0.5,"1","0"))
titmat
View(titmat)
View(pdata)
require(caret)
titmat=as.factor(ifelse(
predict(titlog,
newdata=titanic,
type="response")
>0.5,"1","0"))
confusionMatrix(titmat, as.factor(titanic$sobreviveu), positive="1")
require(caret)
titmat=as.factor(ifelse(
predict(titlog,
newdata=titanic,
type="response")
>0.5,"1","0"))
confusionMatrix(titmat, as.factor(titanic$sobreviveu), positive="1")
require(pROC)
roctit=plot.roc(titanic$sobreviveu, fitted(titlog))
plot(roctit)
require(pROC)
roctit=plot.roc(titanic$sobreviveu, fitted(titlog))
plot(roctit,
print.auc=TRUE,
auc.polygon=TRUE,
grud=c(0.1,0.2),
grid.col=c("green", "red"),
max.auc.polygon=TRUE,
auc.polygon.col="lightgreen",
print.thres=TRUE)
hjtit=hoslem.test(titanic$sobreviveu, fitted(titlog), g=10)
require(ResourceSelection)
hjtit=hoslem.test(titanic$sobreviveu, fitted(titlog), g=10)
hjtit
require(modEvA)
RsqGLM(titlog)
step(titlog, direction = 'both)
step(titlog, direction = 'both')
# Filtrando a idade dos indivíduos
IDADE<-chd[,1]
# Criando campo de predição para cada idade dos indivíduos
IDADE$PRED=predict(m1, newdata=IDADE, type="response")
# Plotando a probabilidade predita pelo modelo
require(ggplot2)
ggplot(IDADE, aes(x=AGE, y=PRED)) +
geom_point()
media = data.frame(AGE=mean(chd$AGE))
media
media$pred.prob = predict(m1, newdata=media, type="response")
media
require(caret)
pdata <- as.factor(
ifelse(
predict(m1,
newdata = chd,
type = "response")
>0.5,"1","0"))
confusionMatrix(pdata, chd$CHD, positive="1")
require(pROC)
roc1=plot.roc(chd$CHD,fitted(m1))
plot(roc1,
print.auc=TRUE,
auc.polygon=TRUE,
grud=c(0.1,0.2),
grid.col=c("green","red"),
max.auc.polygon=TRUE,
auc.polygon.col="lightgreen",
print.thres=TRUE)
require(modEvA)
RsqGLM(m1)
require(ResourceSelection)
hl=hoslem.test(chd$CHD,fitted(m1),g=10)
hl
require(pROC)
roc1=plot.roc(chd$CHD,fitted(m1))
m1=glm(CHD~AGE, family = binomial(link="logit"), data = chd)
summary(m1)
require(foreign)
mydata <- read.dta("http://dss.princeton.edu/training/Panel101.dta")
summary(mydata)
logit=glm(y_bin~x3, data=mydata, family = binomial(link="logit"))
summary(logit)
logit=glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit"))
summary(logit)
# Carregando o arquivo
require(readr)
binary <- read.csv("http://www.karlin.mff.cuni.cz/~pesta/prednasky/NMFM404/Data/binary.csv")
# Transformando a variável rank em categórica
binary$rank <- factor(binary$rank)
# Determinando a regressão
mylogit <- glm(admit ~ gre + gpa + rank, data = binary,
family = binomial(link="logit"))
# Resultado
summary(mylogit)
anova(mylogit, test = "Chisq")
mylogit2=update(mylogit,~. - gre)
mylogit2
mylogit2=update(mylogit,~. - gre)
anova(mylogit,mylogit2, test = "Chisq")
mylogit2=update(mylogit,~. - gre -gpa)
anova(mylogit,mylogit2, test = "Chisq")
# Criação de novo modelo com base no anterior
mylogit2=update(mylogit,~. - gre)
#
anova(mylogit,mylogit2, test = "Chisq")
# Criação de novo modelo com base no anterior
mylogit2=update(mylogit,~. - gpa)
#
anova(mylogit,mylogit2, test = "Chisq")
# Criação de novo modelo com base no anterior
mylogit2=update(mylogit,~. - rank)
#
anova(mylogit,mylogit2, test = "Chisq")
# Criação de novo modelo com base no anterior
mylogit2=update(mylogit,~. - gre)
#
anova(mylogit,mylogit2, test = "Chisq")
mylogit$null.deviance
mylogit$deviance
1-(m1$deviance/m1$null.deviance)
knitr::include_graphics("curvaroc.png")
knitr::include_graphics("curvaroc.png")
vif(logit)
require(faraway)
vif(logit)
install.packages(faraway)
install.packages("faraway")
require(faraway)
vif(logit)
#require(faraway)
VIF(logit)
vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
#require(faraway)
#vif(logit)
vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
#require(faraway)
vif(logit)
#vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
detach("package:faraway", unload=TRUE)
#require(faraway)
vif(logit)
#require(faraway)
#vif(logit)
vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
require(faraway)
vif(logit)
#vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
require(faraway)
vif(logit)
#vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
require(car)
vif(logit)
#vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
detach("package:faraway", unload=TRUE)
require(car)
vif(logit)
#vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
require(faraway)
vif(logit)
#vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
detach("package:faraway", unload=TRUE)
require(rms)
vif(logit)
#vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
require(car)
vif(logit)
#vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
require(AED)
vif(logit)
#vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
install.packages("AED")
require(AED)
vif(logit)
#vif(glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit")))
#require(AED)
stepVIF(logit)
step(titlog, direction = 'both')
require(modEvA)
RsqGLM(m1)
require(modEvA)
RsqGLM(m1)
?step
?step
HLfit(model=m1, bin.method = "quantiles")
HLfit(model=mylogit, bin.method = "quantiles")
HLfit(model=mylogit2, bin.method = "quantiles")
?HLfit
HLfit(model=m1, bin.method ="n.bins")
HLfit(model=m1, bin.method ="n.bins", n.bins=10)
HLfit(model=m1, bin.method ="n.bins", n.bins=10)
HLfit(model=m1, bin.method ="n.bins", n.bins=10)
HLfit(model=m1, bin.method ="n.bins", fixed.bin.size = TRUE)
HLfit(model=m1, bin.method ="round.prob")
require(ResourceSelection)
hl=hoslem.test(chd$CHD,fitted(m1),g=10)
hl
HLfit(model=m1, bin.method ="round.prob")
HLfit(model=m1, bin.method ="size.bins")
PseudoR2(m1)
install.packages("PseudoR2")
install.packages("fmsb")
require(fmsb)
VIF(logit)
require(fmsb)
VIF(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit"))
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
Sys.setenv(RSTUDIO_PDFLATEX = "latexmk")
options(width = 80, digits = 4,
bookdown.clean_book = TRUE)
knitr::opts_chunk$set(
tidy = FALSE,
fig.align = "center",
out.width = '90%',
comment = NA,
fig.pos = 'h',
fig.keep='last'
)
packages <- c("caret", "pROC", "ResourceSelection", "modEvA", "foreign", "stargazer", "mfx","readr","ggplot2")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
knitr::include_graphics("curvalog.png")
require(readr)
chd <- read_delim("https://goo.gl/uDAAHv",
";", escape_double = FALSE, col_types = cols(CHD = col_factor(levels = c())),
trim_ws = TRUE)
summary(chd)
require(ggplot2)
ggplot(chd, aes(x=AGE, y=CHD)) +
geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE)
m1=glm(CHD~AGE, family = binomial(link="logit"), data = chd)
summary(m1)
# Filtrando a idade dos indivíduos
IDADE<-chd[,1]
# Criando campo de predição para cada idade dos indivíduos
chd$PRED=predict(m1, newdata=IDADE, type="response")
# Plotando a probabilidade predita pelo modelo
require(ggplot2)
ggplot(chd, aes(x=AGE, y=PRED)) +
geom_point()
require(mfx)
logitor(CHD~AGE,data = chd)
exp(cbind(OR=coef(m1), confint(m1)))
media = data.frame(AGE=mean(chd$AGE))
media
media$pred.prob = predict(m1, newdata=media, type="response")
media
require(caret)
pdata <- as.factor(
ifelse(
predict(m1,
newdata = chd,
type = "response")
>0.5,"1","0"))
confusionMatrix(pdata, chd$CHD, positive="1")
knitr::include_graphics("curvaroc.png")
require(pROC)
roc1=plot.roc(chd$CHD,fitted(m1))
plot(roc1,
print.auc=TRUE,
auc.polygon=TRUE,
grud=c(0.1,0.2),
grid.col=c("green","red"),
max.auc.polygon=TRUE,
auc.polygon.col="lightgreen",
print.thres=TRUE)
require(ResourceSelection)
hl=hoslem.test(chd$CHD,fitted(m1),g=10)
hl
require(modEvA)
RsqGLM(m1)
require(foreign)
mydata <- read.dta("http://dss.princeton.edu/training/Panel101.dta")
summary(mydata)
logit=glm(y_bin~x1+x2+x3, data=mydata, family = binomial(link="logit"))
summary(logit)
require(stargazer)
stargazer(logit, title="Resultados",type = "text")
require(mfx)
logitor(y_bin~x1+x2+x3,data=mydata)
exp(coef(logit))
exp(cbind(OR=coef(logit), confint(logit)))
allmean = data.frame(x1=mean(mydata$x1),
x2=mean(mydata$x2),
x3=mean(mydata$x3))
allmean
allmean$pred.prob = predict(logit, newdata=allmean, type="response")
allmean
step(logit, direction = 'both')
require(faraway)
vif(logit)
# Carregando o arquivo
require(readr)
binary <- read.csv("http://www.karlin.mff.cuni.cz/~pesta/prednasky/NMFM404/Data/binary.csv")
# Transformando a variável rank em categórica
binary$rank <- factor(binary$rank)
# Determinando a regressão
mylogit <- glm(admit ~ gre + gpa + rank, data = binary,
family = binomial(link="logit"))
# Resultado
summary(mylogit)
anova(mylogit, test = "Chisq")
# Criação de novo modelo com base no anterior
mylogit2=update(mylogit,~. - gre)
#
anova(mylogit,mylogit2, test = "Chisq")
exp(cbind(OR = coef(mylogit), confint(mylogit)))
pred=data.frame(gre=700,
gpa=3.67,
rank=factor(1)
)
pred$prob=predict(mylogit, newdata=pred, type="response")
pred
pred=data.frame(gre=700,
gpa=3.67,
rank=factor(4)
)
pred$prob=predict(mylogit, newdata=pred, type="response")
pred
# Criação da tabela
novosdados=with(binary,
data.frame(gre=mean(gre),
gpa=mean(gpa),
rank=factor(1:4)))
# Incluindo a predição dos valores
novosdados=cbind(novosdados,predict(mylogit,
newdata=novosdados,
type="response",
se.fit=TRUE))
# Renomeando as variáveis
names(novosdados)[names(novosdados)=='fit']="prob"
names(novosdados)[names(novosdados)=='se.fit']="se.prob"
# Estimando os intervalos de confiança
novosdados$LL=novosdados$prob-1.96*novosdados$se.prob
novosdados$UL=novosdados$prob+1.96*novosdados$se.prob
# Vizualização dos dados
novosdados
require(ggplot2)
ggplot(novosdados, aes(x=rank,y=prob))+
geom_errorbar(aes(ymin=LL, ymax=UL), width=0.2,lty=1,lwd=1,col="red")+
geom_point(shape=18, size=5, fill="black")+
scale_x_discrete(limits=c("1","2","3","4"))+
labs(title="Probabilidades preditas", x="Ranking",y="Pr(y=1)")
require(caret)
chd$pdata <- as.factor(
ifelse(
predict(m1,
newdata = chd,
type = "response")
>0.5,"1","0"))
confusionMatrix(chd$pdata, chd$CHD, positive="1")
summary(m1)
plot(m1)
plot(m1)
View(condicionalcrime)
